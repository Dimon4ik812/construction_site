name: CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "/usr/local/bin" >> $GITHUB_PATH  # Добавляем путь к docker-compose в PATH


      - name: Check Docker Compose version
        run: |
          docker-compose --version

      - name: Install dependencies
        run: |
          pip install flake8  # Установите линтер
          flake8 .  # Запустите линтинг

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-root

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: .env
          fail_on_empty: true
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: ${{ secrets.DEBUG }}
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          envkey_POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}


  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          docker compose build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_new
          chmod 600 ~/.ssh/id_rsa_new
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Start SSH agent
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          
      - name: Test SSH connection to GitHub
        run: |
          ssh -T git@github.com
          

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
        run: |
          ssh -i ~/.ssh/id_rsa_new -o root@188.225.27.88 "
          set -x
          cd /root/construction_site/construction_site &&
          git pull &&
          docker-compose down --remove-orphans &&
          docker-compose up -d --build
          "